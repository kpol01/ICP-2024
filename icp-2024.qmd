---
title: "Tests for Randomness"

author: "Ananyo Dey
      <br>
      Kaustav Paul"
institute: Indian Statistical Institute, Delhi Center
Date: "2024.04.11"
format: 
  revealjs: 
    incremental: true
    transition: slide
    theme: serif
    fontsize: 150%
    footer: Indian Statistical Institute, Delhi
execute: 
  echo: true
editor: visual
---

# Some Statistical Tests for Goodness of Fit

## Chi-square Goodness of Fit Test

Let $X_1, X_2, ..., X_n \sim F(.)$ independently.

We consider mutually exclusive and exhaustive classes $C_1, C_2,...,C_k$ such that

$$\mathbb{P}(X \in C_i) = p_i$$ We want to test the hypothesis,

$$H_0:p_i = p_i^0 , \text{for all } i \quad \text{vs} \quad H_1 : p_i \neq p_i^0, \text{for at least one } i$$

Let $f_i$ be the observed frequency of the $i^{th}$ class in the sample. The observed frequency of the $i^{th}$ class is given by $O_i = np_i$ for all $i$.

## Chi-square Goodness of Fit Test

The chi-square goodness of fit statistic is given by,

$$Q = \sum_{i=1}^{k} \frac{(f_i - np_i^0)^2}{np_i^0}$$ Under $H_0$, $Q \xrightarrow{d} \chi^2_{k-1}$ as $n \rightarrow \infty$

**Critical Region:** We reject $H_0$ for large values of observed $Q$. For large $n$ we reject $H_0$ if $Q_{obs} > \chi^2_{k-1}(\alpha)$, where $\chi^2_{k-1}(\alpha)$ is the upper $\alpha$ point of a $\chi^2_{k-1}$ distribution.

## Kolmogorov-Smirnov Test

Suppose $X_1, X_2, ..., X_n \sim F(.)$ independently.

Let $F_0(.)$ be a known distribution function. We want to test the hypotheses,

$$H_0 : F(x) = F_0(x), \text{for all  } x \quad vs \quad F(x) \neq F_0(x), \text{for at least one }x$$

Let $S_n(.)$ be the empirical cdf defined as,

$$S_n(x) = \frac{1}{n} \sum _{i = 1} ^n \mathbb{I}\{X_i \leq x\}$$

Then $$nS_n \sim Bin(n,F(x))$$

## Kolmogorov-Smirnov Test

The Kolmogorov - Smirnov Test Statistic is given by

$$D_n = \sup_{x} |S_n(x) - F_0(x)|$$

**Critical Region:** We reject $H_0$ for large values of $Q_{obs}$.

# Empirical Tests

## The Setup

::: incremental
-   Let us consider a sequence of numbers $$U_1, U_2, U_3, ...\quad (1)$$ of real numbers where each $0 < U_i < 1$. We need to test whether it is a random sample from $U(0,1)$.

-   Some of the tests are designed primarily for integer-valued sequences, instead of the real-valued sequence (1). In this case, the auxiliary sequence $$Y_1, Y_2, ... \quad (2)$$ defined by the rule $$ Y_n = \lfloor dU_n \rfloor \quad ...(3)$$ is used instead. So testing the uniformity of $\{U_n\}$ between 0 and 1 is equivalent to testing uniformity of $\{Y_n\}$ in the set $\{0, 1, ..., d-1\}$.
:::

# Frequency Test

## Test Procedure

::: incremental
-   We are provided with a sequence of real numbers $$U_1, U_2,...$$ We need to test $$H_0: U_1, U_2, ... \sim U(0,1) \text{ independently} \quad \text{vs} \quad H_1: \text{not } H_0$$

-   For an integer $d$ we construct the sequence $\{Y_n\}$ as discussed earlier.

-   If $H_0$ is true, $\{Y_n\}$ is a random sample from $\{0, 1, ..., d-1\}$.

-   We count the number of occurences of $r$ in $\{Y_n\}$ for all $0 \leq r \leq d-1$.

-   Under $H_0$, expected frequency of each $r$ in $\{Y_n\}$ is $\frac{n}{d}$.

-   Now we use the $\chi^2$-goodness of fit test over $\{Y_n\}$ using $\{0, 1, ..., d-1\}$ as the $d$ classes.
:::

## Algorithm to Calculate Frequencies


:::columns

:::{.column}

```{r echo = F, warning=F, fig.height=7, fig.align='center'}
library(DiagrammeR)
graph <- "
digraph flowchart {

  # Node definitions
  A [shape=box, label=\"U_n\", color=\"blue\"];
  B [shape=box, label=\"Y_n\", color=\"blue\"];
  C [shape=box, label=\"count[r] = 0\", color=\"blue\"];
  D [shape=ellipse, label=\"Is r = Y_i?\", color=\"orange\"]
  E [shape=box, label=\"count[r] = count[r] + 1\", color=\"blue\"]
  F [shape=box, label=\"i = i+1\", color=\"blue\"]
  G [shape=ellipse, label=\"Is i <= n?\", color=\"orange\"]
  H [shape = box, label=\"r = r+1\", color=\"blue\"]
  I [shape=ellipse, label=\"Is r<d?\", color=\"orange\"]
  J [shape=box, label=\"End\", color=\"blue\"]
  
  
  
  
  # Edges to indicate the flow
  A -> B [label=\"Divide by d and take floor\"]
  B -> C [label=\"set r=0\"]
  C -> D [label = \"set i=1\"]
  D -> E [label=\"yes\"]
  E -> F 
  D -> F [label=\"no\"]
  F -> G 
  G -> D [label=\"yes\"]
  G -> H [label=\"no\"]
  H -> I 
  I -> C [label=\"yes\"]
  I -> J [label=\"no\"]
  

}

"

grViz(graph)
```

:::

:::{.column}

```{r}
freq_test <- function (u, d) 
{
  seq = 0:(d-1)
  integernum <- floor(u * d)
  obsnum <- sapply(seq, function(x) sum(integernum == x))
  expnum <- length(u)/length(seq)
  residu <- (obsnum - expnum)/sqrt(expnum)
  stat <- sum(residu^2)
  pvalue <- pchisq(stat, length(seq) - 1, lower.tail = FALSE)
  
  df <- data.frame(1:length(obsnum), obsnum, expnum)
  colnames(df) <- c("Y_j", "Observed Freq", "Expected Freq")
  
  res <- list(statistic = stat, parameter = length(seq) - 1, 
              p.value = pvalue, df)
  return(res)
}
```

:::

:::


## Implementation of the `freq_test` Function

::: {.panel-tabset}

### **Under** $H_0$:

$$U_1, U_2, U_3, ... \sim U(0,1)$$

```{r}
sample <- runif(1000)
d <- 50
freq_test(sample, d)
```



### **Under** $H_1$:


 $$U_i \sim F_i(.), \quad \text{independently}$$where $$F_i = \begin{cases} U(0, \frac{1}{4}) & \text{if } i = 2k \\ U(\frac{1}{4},1) & \text{if } i = 2k+1 \end{cases}$$
 We constructed the function `sampling.dep` to sample from this distribution.

```{r, include = F}
sampling.dep <- function(n)
{
  sam <- 0
  sam[1] <- runif(1)
  for(i in (2:n))
  {
    if(i %% 2 == 0){
    sam[i] <- runif(1, 0, 0.25)}
    else{
      sam[i] <- runif(1, 0.25, 1)
    }
  }
  return(sam)
}
```

 Applying `freq_test` over a sample from the above distribution.

```{r}
freq_test(sampling.dep(1000), 10)
```
:::

# Serial Test

## Test Procedure

::: incremental
- To check if adjacent pairs of observations are random or not.

- To carry out the serial test, we simply count the number of times that the
pair $(Y_{2j} , Y_{2j+1}) = (q, r)$ occurs, for $0 \leq j < k$, where $n = 2k$.

-  These counts are to be made for each pair of integers $(q, r)$ with $0 \leq q, r < d$.

- There are $d^2$ unique pairs of the above type. If the sequence is random all the $d^2$ pairs have equal probability of occurrence ($\frac{1}{d^2}$).

- Expected frequency of the $i^{th}$ pair is $E_i = \frac{n}{d^2}$.

- Then we calculate the $\chi^2$-goodness of fit considering the $d^2$ unique pairs as the classes. In this case $Q \sim \chi^2_{d^2 - 1}$ under $H_0$.
:::

## Algorithm to obtain frequencies of the pairs

- The algorithm goes exactly the same as frequency test. Here instead we count the number of adjacent pairs.

- To count the number of pairs we use the following procedure.

- For each pair $(Y_{2j} , Y_{2j+1})$ we calculate $p_j = Y_{2j} \times d + Y_{2j+1}$.

- It can be easily shown that for unique pair $(a, b)$ the value $p = a \times d + b$ is unique.

- So obtaining frequency distribution of the pairs $(Y_{2j}, Y_{2j+1})$ is same as obtaining the frequency distribution of $p_j$ values. 

## Implementing Serial Test on simulated data

We have made an  R function `serial_test` for this purpose:

```{r}
serial_test <- function (u, d) 
{
  pair <- matrix(floor(u * d), length(u)/2, 2)
  p <- pair[, 1] * d + pair[, 2]
  obsnum <- sapply(0:(d^2 - 1), function(x) sum(p == x))
  expnum <- length(u)/(2 * d^2)
  residu <- (obsnum - expnum)/sqrt(expnum)
  stat <- sum(residu^2)
  pvalue <- pchisq(stat, d^2 - 1, lower.tail = FALSE)
  
  
  res <- list(statistic = stat, df = d^2 - 1, p.value = pvalue, 
              observed = obsnum, expected = expnum)
  return(res)
}
```

## Implementing `serial_test` function on simulated data

::: {.panel-tabset}

### Under $H_0$

$$U_1, U_2, U_3, ... \sim U(0,1)$$

We have implemented `serial_test` on a random sample of size 1000 from $U(0,1)$ distribution.

```{r}
serial_test(runif(1000), d = 10)
```




### Under $H_1$

$$U_i \sim F_i(.), \quad \text{independently}$$where $$F_i = \begin{cases} U(0, \frac{1}{4}) & \text{if } i = 2k \\ U(\frac{1}{4},1) & \text{if } i = 2k+1 \end{cases}$$
We have implemented `serial_test` on a random sample of size 1000 from $U(0,1)$ distribution.

```{r}
serial_test(sampling.dep(1000), d = 10)
```

:::

## Some Notes on Serial Test

::: incremental
- We can not use all possible adjacent pairs $\{Y_i, Y_{i+1}\}$.
- The serial test can be expended from considering pairs to triples, quadruples, ...

- However for that we need to keep $d$ low because then it will lead to a large number of possible classes.
:::
